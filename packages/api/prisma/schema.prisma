// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
}

model cad {
  id               String    @id @default(cuid())
  name             String    @db.VarChar(255)
  owner            User      @relation(fields: [ownerId], references: [id])
  ownerId          String
  areaOfPlay       String?   @db.VarChar(255)
  steamApiKey      String?   @db.VarChar(255)
  whitelisted      Boolean   @default(false)
  towWhitelisted   Boolean   @default(false)
  maxPlateLength   Int       @default(8)
  liveMapSocketURl String?   @db.VarChar(255)
  logoId           String?
  registrationCode String?
  disabledFeatures Feature[]
}

model User {
  id                   String              @id @default(cuid())
  username             String              @unique @db.VarChar(255)
  password             String              @db.Text
  rank                 Rank                @default(USER)
  isLeo                Boolean             @default(false)
  isSupervisor         Boolean             @default(false)
  isEmsFd              Boolean             @default(false)
  isDispatch           Boolean             @default(false)
  isTow                Boolean             @default(false)
  banned               Boolean             @default(false)
  banReason            String?
  avatarUrl            String?             @db.Text
  steamId              String?             @db.VarChar(255)
  whitelistStatus      WhitelistStatus     @default(ACCEPTED)
  citizens             Citizen[]
  cads                 cad[]
  vehicles             RegisteredVehicle[]
  weapons              Weapon[]
  notifications        Notification[]
  executedNotifictions Notification[]      @relation("executor")
  medicalRecords       MedicalRecord[]
  bleeterPosts         BleeterPost[]
  towCalls             TowCall[]
}

model Citizen {
  id              String              @id @default(cuid())
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  name            String              @db.VarChar(255)
  surname         String              @db.VarChar(255)
  dateOfBirth     DateTime
  gender          String              @db.VarChar(255)
  ethnicity       String              @db.VarChar(255)
  hairColor       String              @db.VarChar(255)
  eyeColor        String              @db.VarChar(255)
  address         String              @db.VarChar(255)
  height          String              @db.VarChar(255)
  weight          String              @db.VarChar(255)
  driversLicense  String?             @db.VarChar(255)
  weaponLicense   String?             @db.VarChar(255)
  pilotLicense    String?             @db.VarChar(255)
  ccw             String?             @db.VarChar(255)
  imageId         String?             @db.Text
  note            String?             @db.Text
  dead            Boolean?            @default(false)
  dateOfDead      DateTime?
  vehicles        RegisteredVehicle[]
  weapons         Weapon[]
  medicalRecords  MedicalRecord[]
  towCalls        TowCall[]
  createdTowCalls TowCall[]           @relation("towCallCreator")
}

enum Rank {
  OWNER
  ADMIN
  MODERATOR
  USER
}

enum WhitelistStatus {
  ACCEPTED
  PENDING
  DECLINED
}

model RegisteredVehicle {
  id                 String   @id @default(cuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  citizen            Citizen  @relation(fields: [citizenId], references: [id])
  citizenId          String
  vinNumber          String   @unique @db.VarChar(255)
  plate              String   @unique @db.VarChar(255)
  model              String   @db.Text
  color              String   @db.VarChar(255)
  createdAt          DateTime @default(now())
  registrationStatus String   @db.VarChar(255)
  insuranceStatus    String   @db.VarChar(255)
}

model Weapon {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  citizen   Citizen @relation(fields: [citizenId], references: [id])
  citizenId String

  serialNumber       String @unique @db.VarChar(255)
  registrationStatus String @db.VarChar(255)
  model              String @db.VarChar(255)
}

model MedicalRecord {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  citizen   Citizen @relation(fields: [citizenId], references: [id])
  citizenId String

  type        String @db.VarChar(255)
  description String @db.Text
}

// admin values
model Value {
  id        String    @id @default(cuid())
  type      ValueType
  value     String    @db.VarChar(255)
  isDefault Boolean
}

enum ValueType {
  LICENSE
  GENDER
  ETHNICITY
  VEHICLE
  WEAPON
  BLOOD_GROUP
}

// notifications
model Notification {
  id          String @id @default(uuid())
  user        User   @relation(fields: [userId], references: [id])
  userId      String
  executor    User   @relation("executor", fields: [executorId], references: [id])
  executorId  String
  title       String
  description String
}

// bleeter
model BleeterPost {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String   @db.VarChar(255)
  body      String   @db.Text
  imageId   String?  @db.VarChar(255)
  createdAt DateTime @default(now())
}

// tow
model TowCall {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  assignedUnit Citizen? @relation(fields: [citizenId], references: [id])
  citizenId    String?
  location     String   @db.VarChar(255)
  description  String   @db.Text
  creator      Citizen  @relation("towCallCreator", fields: [creatorId], references: [id])
  creatorId    String
}

enum Feature {
  BLEETER
  TOW
  TAXI
  COURTHOUSE
  TRUCK_LOGS
  AOP
}
