// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
}

model cad {
  id                      String                 @id @default(cuid())
  name                    String                 @db.VarChar(255)
  owner                   User                   @relation(fields: [ownerId], references: [id])
  ownerId                 String
  areaOfPlay              String?                @db.VarChar(255)
  steamApiKey             String?                @db.VarChar(255)
  discordWebhookURL       String?                @db.VarChar(255)
  whitelisted             Boolean                @default(false)
  towWhitelisted          Boolean                @default(false)
  businessWhitelisted     Boolean                @default(false)
  maxPlateLength          Int                    @default(8)
  liveMapSocketURl        String?                @db.VarChar(255)
  logoId                  String?
  registrationCode        String?
  disabledFeatures        Feature[]
  miscCadSettings         MiscCadSettings?       @relation(fields: [miscCadSettingsId], references: [id])
  miscCadSettingsId       String?
  apiToken                ApiToken?              @relation(fields: [apiTokenId], references: [id])
  apiTokenId              String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @default(now()) @updatedAt
  autoSetUserProperties   AutoSetUserProperties? @relation(fields: [autoSetUserPropertiesId], references: [id])
  autoSetUserPropertiesId String?
}

model MiscCadSettings {
  id String @id @default(cuid())

  heightPrefix            String   @default("cm") @db.VarChar(255)
  weightPrefix            String   @default("kg") @db.VarChar(255)
  maxCitizensPerUser      Int?
  maxOfficersPerUser      Int?
  maxPlateLength          Int      @default(8)
  maxBusinessesPerCitizen Int?
  maxDivisionsPerOfficer  Int?
  callsignTemplate        String   @default("{department}{callsign1} - {callsign2}{division}") @db.Text
  pairedUnitSymbol        String   @default("A") @db.VarChar(255)
  signal100Enabled        Boolean  @default(false)
  liveMapURL              String?  @db.Text
  roleplayEnabled         Boolean? @default(true)
  authScreenBgImageId     String?
  authScreenHeaderImageId String?

  cad cad[]
}

model AutoSetUserProperties {
  id String @id @default(cuid())

  leo      Boolean? @default(false)
  dispatch Boolean? @default(false)
  emsFd    Boolean? @default(false)

  cad cad[]
  @@map("AutoSetPropertiesUser")
}

model ApiToken {
  id      String   @id @default(cuid())
  enabled Boolean  @default(false)
  token   String?
  // empty = *
  routes  String[]

  cad cad[]
}

model User {
  id                    String                @id @default(cuid())
  username              String                @unique @db.VarChar(255)
  password              String                @db.Text
  rank                  Rank                  @default(USER)
  isLeo                 Boolean               @default(false)
  isSupervisor          Boolean               @default(false)
  isEmsFd               Boolean               @default(false)
  isDispatch            Boolean               @default(false)
  isTow                 Boolean               @default(false)
  banned                Boolean               @default(false)
  banReason             String?
  avatarUrl             String?               @db.Text
  steamId               String?               @db.VarChar(255)
  whitelistStatus       WhitelistStatus       @default(ACCEPTED)
  isDarkTheme           Boolean               @default(true)
  tempPassword          String?
  statusViewMode        StatusViewMode        @default(DOT_COLOR)
  tableActionsAlignment TableActionsAlignment @default(RIGHT)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @default(now()) @updatedAt
  discordId             String?


  // relational data
  citizens             Citizen[]
  cads                 cad[]
  vehicles             RegisteredVehicle[]
  weapons              Weapon[]
  notifications        Notification[]
  executedNotifictions Notification[]       @relation("executor")
  medicalRecords       MedicalRecord[]
  bleeterPosts         BleeterPost[]
  businesses           Business[]
  businessPosts        BusinessPost[]
  Employee             Employee[]
  officers             Officer[]
  emsFdDeputies        EmsFdDeputy[]
  TruckLog             TruckLog[]
  ExpungementRequest   ExpungementRequest[]
  ActiveDispatchers    ActiveDispatchers[]
  User2FA              User2FA[]
}

model User2FA {
  id     String @id @default(uuid())
  secret String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum StatusViewMode {
  FULL_ROW_COLOR
  DOT_COLOR
}

enum TableActionsAlignment {
  NONE
  LEFT
  RIGHT
}

model Citizen {
  id                   String                        @id @default(cuid())
  socialSecurityNumber String?
  user                 User?                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String?
  name                 String                        @db.VarChar(255)
  surname              String                        @db.VarChar(255)
  dateOfBirth          DateTime
  gender               Value                         @relation("genderToValue", fields: [genderId], references: [id])
  genderId             String
  ethnicity            Value                         @relation("ethnicityToValue", fields: [ethnicityId], references: [id])
  ethnicityId          String
  hairColor            String                        @db.VarChar(255)
  eyeColor             String                        @db.VarChar(255)
  address              String                        @db.VarChar(255)
  postal               String?                       @db.VarChar(255)
  height               String                        @db.VarChar(255)
  weight               String                        @db.VarChar(255)
  driversLicense       Value?                        @relation("driversLicenseToValue", fields: [driversLicenseId], references: [id])
  driversLicenseId     String?
  dlCategory           DriversLicenseCategoryValue[] @relation("dlCategoryToDLCategory")
  weaponLicense        Value?                        @relation("weaponLicenseToValue", fields: [weaponLicenseId], references: [id])
  weaponLicenseId      String?
  pilotLicense         Value?                        @relation("pilotLicenseToValue", fields: [pilotLicenseId], references: [id])
  pilotLicenseId       String?
  ccw                  Value?                        @relation("ccwToValue", fields: [ccwId], references: [id])
  ccwId                String?
  imageId              String?                       @db.Text
  note                 String?                       @db.Text
  dead                 Boolean?                      @default(false)
  arrested             Boolean?                      @default(false)
  phoneNumber          String?
  dateOfDead           DateTime?
  occupation           String?                       @db.Text
  vehicles             RegisteredVehicle[]
  weapons              Weapon[]
  medicalRecords       MedicalRecord[]
  towCalls             TowCall[]
  createdTowCalls      TowCall[]                     @relation("towCallCreator")
  businesses           Business[]
  Employee             Employee[]
  officers             Officer[]
  warrants             Warrant[]
  Record               Record[]
  emsFdDeputies        EmsFdDeputy[]
  TaxiCall             TaxiCall[]
  createdTaxiCalls     TaxiCall[]                    @relation("taxiCallCreator")
  truckLogs            TruckLog[]
  createdAt            DateTime                      @default(now())
  updatedAt            DateTime                      @default(now()) @updatedAt
  RecordRelease        RecordRelease[]
  RecordLog            RecordLog[]
  ExpungementRequest   ExpungementRequest[]
}

enum Rank {
  OWNER
  ADMIN
  USER
}

enum WhitelistStatus {
  ACCEPTED
  PENDING
  DECLINED
}

model RegisteredVehicle {
  id                   String             @id @default(cuid())
  user                 User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String?
  citizen              Citizen            @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId            String
  vinNumber            String             @unique @db.VarChar(255)
  plate                String             @unique @db.VarChar(255)
  model                VehicleValue       @relation(fields: [modelId], references: [id])
  modelId              String
  color                String             @db.VarChar(255)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
  registrationStatus   Value              @relation("registrationStatusToValue", fields: [registrationStatusId], references: [id])
  registrationStatusId String
  insuranceStatus      String             @db.VarChar(255)
  reportedStolen       Boolean            @default(false)
  impounded            Boolean            @default(false)
  TruckLog             TruckLog[]
  ImpoundedVehicle     ImpoundedVehicle[]
  Business             Business[]         @relation("registeredBusinessVehicles")
}

model Weapon {
  id                   String      @id @default(cuid())
  user                 User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String?
  citizen              Citizen     @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId            String
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @default(now()) @updatedAt
  serialNumber         String      @unique @db.VarChar(255)
  registrationStatus   Value       @relation("weaponRegistrationStatusToValue", fields: [registrationStatusId], references: [id])
  registrationStatusId String
  model                WeaponValue @relation("weaponModelToValue", fields: [modelId], references: [id])
  modelId              String
}

model MedicalRecord {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  citizen   Citizen  @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // type = diseases
  type         String? @db.Text
  description  String? @db.Text
  bloodGroup   Value?  @relation(fields: [bloodGroupId], references: [id])
  bloodGroupId String?
}

// admin values
model Value {
  id        String    @id @default(cuid())
  type      ValueType
  value     String    @db.VarChar(255)
  isDefault Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  position  Int?

  // LICENSE type specific
  // this was added here since the migration of eg `LicenseValue` would be to large.
  licenseType ValueLicenseType?

  // how to clean this up?!
  ethnicityToValue                Citizen[]                     @relation("ethnicityToValue")
  genderToValue                   Citizen[]                     @relation("genderToValue")
  driversLicenseToValue           Citizen[]                     @relation("driversLicenseToValue")
  weaponLicenseToValue            Citizen[]                     @relation("weaponLicenseToValue")
  pilotLicenseToValue             Citizen[]                     @relation("pilotLicenseToValue")
  ccwToValue                      Citizen[]                     @relation("ccwToValue")
  registrationStatusToValue       RegisteredVehicle[]           @relation("registrationStatusToValue")
  weaponRegistrationStatusToValue Weapon[]                      @relation("weaponRegistrationStatusToValue")
  EmployeeValue                   EmployeeValue[]
  officerRankToValue              Officer[]                     @relation("officerRankToValue")
  StatusValueToValue              StatusValue[]                 @relation("StatusValueToValue")
  divisionToValue                 DivisionValue[]               @relation("divisionToValue")
  emsFdRankToValue                EmsFdDeputy[]                 @relation("emsFdRankToValue")
  departmentToValue               DepartmentValue[]             @relation("departmentToValue")
  driversLicenseCategoryToValue   DriversLicenseCategoryValue[] @relation("driversLicenseCategoryToValue")
  VehicleValue                    VehicleValue[]                @relation("vehicleValueToValue")
  WeaponValue                     WeaponValue[]                 @relation("weaponValueToValue")
  ImpoundedVehicle                ImpoundedVehicle[]
  TowCall                         TowCall[]
  MedicalRecord                   MedicalRecord[]
}

enum ValueLicenseType {
  LICENSE
  REGISTRATION_STATUS
}

model PenalCode {
  id                     String                @id @default(cuid())
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @default(now()) @updatedAt
  title                  String                @db.VarChar(255)
  description            String?               @db.Text
  descriptionData        Json?
  warningApplicable      WarningApplicable?    @relation(fields: [warningApplicableId], references: [id])
  warningApplicableId    String?
  warningNotApplicable   WarningNotApplicable? @relation(fields: [warningNotApplicableId], references: [id])
  warningNotApplicableId String?
  violations             Violation[]
  position               Int?
  group                  PenalCodeGroup?       @relation(fields: [groupId], references: [id])
  groupId                String?
}

model PenalCodeGroup {
  id        String      @id @default(cuid())
  position  Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  name      String
  PenalCode PenalCode[]
}

// Int[] = [field1, field2]. Items in this array where idx > 1 will be ignored
model WarningApplicable {
  id        String      @id @default(uuid())
  fines     Int[]
  PenalCode PenalCode[]
}

model WarningNotApplicable {
  id         String      @id @default(uuid())
  fines      Int[]
  prisonTerm Int[]
  bail       Int[]
  PenalCode  PenalCode[]
}

model Violation {
  id          String    @id @default(uuid())
  fine        Int?
  jailTime    Int?
  bail        Int?
  penalCode   PenalCode @relation(fields: [penalCodeId], references: [id])
  penalCodeId String
  records     Record[]
}

model DivisionValue {
  id                         String           @id @default(cuid())
  value                      Value            @relation("divisionToValue", fields: [valueId], references: [id], onDelete: Cascade)
  valueId                    String
  department                 DepartmentValue? @relation("divisionDepartmentToValue", fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId               String?
  callsign                   String?
  officers                   Officer[]        @relation("officerDivisionToDivision")
  officerDivisionsToDivision Officer[]        @relation("officerDivisionsToDivision")
  deputies                   EmsFdDeputy[]    @relation("emsFdDivisionToDivision")
  Call911                    Call911[]
}

model DepartmentValue {
  id                  String               @id @default(cuid())
  value               Value                @relation("departmentToValue", fields: [valueId], references: [id], onDelete: Cascade)
  valueId             String
  callsign            String?
  whitelisted         Boolean              @default(false)
  isDefaultDepartment Boolean              @default(false)
  type                DepartmentType       @default(LEO)
  EmsFdDeputy         EmsFdDeputy[]        @relation("emsFdDepartmentToDepartment")
  Officer             Officer[]            @relation("officerDepartmentToDepartment")
  division            DivisionValue[]      @relation("divisionDepartmentToValue")
  LeoWhitelistStatus  LeoWhitelistStatus[]
  Call911             Call911[]
}

model DriversLicenseCategoryValue {
  id       String                     @id @default(cuid())
  valueId  String
  value    Value                      @relation("driversLicenseCategoryToValue", fields: [valueId], references: [id], onDelete: Cascade)
  type     DriversLicenseCategoryType
  citizens Citizen[]                  @relation("dlCategoryToDLCategory")
}

model VehicleValue {
  id                String              @id @default(cuid())
  valueId           String
  value             Value               @relation("vehicleValueToValue", fields: [valueId], references: [id], onDelete: Cascade)
  hash              String?
  RegisteredVehicle RegisteredVehicle[]
}

model WeaponValue {
  id      String   @id @default(cuid())
  valueId String
  value   Value    @relation("weaponValueToValue", fields: [valueId], references: [id], onDelete: Cascade)
  hash    String?
  weapon  Weapon[] @relation("weaponModelToValue")
}

enum DepartmentType {
  LEO
  EMS_FD
}

enum ValueType {
  LICENSE
  GENDER
  ETHNICITY
  VEHICLE
  WEAPON
  BLOOD_GROUP
  BUSINESS_ROLE
  CODES_10
  PENAL_CODE
  DEPARTMENT
  OFFICER_RANK
  DIVISION
  DRIVERSLICENSE_CATEGORY
  IMPOUND_LOT
}

enum DriversLicenseCategoryType {
  AUTOMOTIVE
  AVIATION
  WATER
}

// notifications
model Notification {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  executor    User     @relation("executor", fields: [executorId], references: [id])
  executorId  String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

// bleeter
model BleeterPost {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  title     String   @db.VarChar(255)
  body      String?  @db.Text
  bodyData  Json?
  imageId   String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// tow
model TowCall {
  id                String   @id @default(uuid())
  userId            String?
  assignedUnit      Citizen? @relation(fields: [assignedUnitId], references: [id], onDelete: SetNull)
  assignedUnitId    String?
  location          String   @db.VarChar(255)
  postal            String?  @db.Text
  deliveryAddress   Value?   @relation(fields: [deliveryAddressId], references: [id])
  deliveryAddressId String?
  plate             String?  @db.VarChar(255)
  model             String?  @db.VarChar(255)
  description       String?  @db.Text
  descriptionData   Json?
  creator           Citizen? @relation("towCallCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId         String?
  ended             Boolean  @default(false)
  callCountyService Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

// taxi
model TaxiCall {
  id              String   @id @default(uuid())
  userId          String?
  assignedUnit    Citizen? @relation(fields: [assignedUnitId], references: [id], onDelete: SetNull)
  assignedUnitId  String?
  location        String   @db.VarChar(255)
  postal          String?  @db.Text
  description     String?  @db.Text
  descriptionData Json?
  creator         Citizen? @relation("taxiCallCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

// businesses
model Business {
  id            String              @id @default(cuid())
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  citizen       Citizen             @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId     String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  name          String              @db.VarChar(255)
  whitelisted   Boolean             @default(false)
  address       String              @db.Text
  postal        String?             @db.VarChar(255)
  status        WhitelistStatus?
  businessPosts BusinessPost[]
  employees     Employee[]
  vehicles      RegisteredVehicle[] @relation("registeredBusinessVehicles")
}

model Employee {
  id                 String          @id @default(cuid())
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  citizen            Citizen         @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId          String
  business           Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId         String
  role               EmployeeValue?  @relation("employeeToValue", fields: [roleId], references: [id], onDelete: Restrict)
  roleId             String?
  employeeOfTheMonth Boolean         @default(false)
  canCreatePosts     Boolean         @default(true)
  whitelistStatus    WhitelistStatus @default(ACCEPTED)
  businessPosts      BusinessPost[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @default(now()) @updatedAt
}

model BusinessPost {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String

  title     String   @db.VarChar(255)
  body      String?  @db.Text
  bodyData  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model EmployeeValue {
  id        String         @id @default(cuid())
  value     Value          @relation(fields: [valueId], references: [id], onDelete: Cascade)
  valueId   String
  as        EmployeeAsEnum @default(EMPLOYEE)
  employees Employee[]     @relation("employeeToValue")
}

enum EmployeeAsEnum {
  OWNER
  MANAGER
  EMPLOYEE
}

// leo
model Officer {
  id                          String              @id @default(cuid())
  department                  DepartmentValue?    @relation("officerDepartmentToDepartment", fields: [departmentId], references: [id])
  departmentId                String?
  callsign                    String              @db.VarChar(255)
  callsign2                   String              @db.VarChar(255)
  // `division` is deprecated. Use `divisions` instead.
  division                    DivisionValue?      @relation("officerDivisionToDivision", fields: [divisionId], references: [id])
  divisionId                  String?
  divisions                   DivisionValue[]     @relation("officerDivisionsToDivision")
  rank                        Value?              @relation("officerRankToValue", fields: [rankId], references: [id])
  rankId                      String?
  status                      StatusValue?        @relation("officerStatusToValue", fields: [statusId], references: [id])
  statusId                    String?
  suspended                   Boolean             @default(false)
  badgeNumber                 Int?
  imageId                     String?             @db.VarChar(255)
  citizen                     Citizen             @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId                   String
  user                        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @default(now()) @updatedAt
  whitelistStatus             LeoWhitelistStatus? @relation(fields: [whitelistStatusId], references: [id])
  whitelistStatusId           String?
  bolos                       Bolo[]              @relation("bolosToOfficer")
  warrants                    Warrant[]
  logs                        OfficerLog[]
  Record                      Record[]
  assignedUnit                AssignedUnit[]
  LeoIncident                 LeoIncident[]
  LeoIncidentInvolvedOfficers LeoIncident[]       @relation("involvedOfficers")
  combinedLeoUnit             CombinedLeoUnit?    @relation(fields: [combinedLeoUnitId], references: [id])
  combinedLeoUnitId           String?
}

model LeoWhitelistStatus {
  id           String          @id @default(uuid())
  status       WhitelistStatus
  // the department they're awaiting access for.
  department   DepartmentValue @relation(fields: [departmentId], references: [id])
  departmentId String
  Officers     Officer[]
}

model StatusValue {
  id        String          @id @default(uuid())
  value     Value           @relation("StatusValueToValue", fields: [valueId], references: [id], onDelete: Cascade)
  valueId   String
  shouldDo  ShouldDoType    @default(SET_STATUS)
  whatPages WhatPages[]
  color     String?
  type      StatusValueType @default(STATUS_CODE)

  officerStatusToValue Officer[]         @relation("officerStatusToValue")
  emsFdStatusToValue   EmsFdDeputy[]     @relation("emsFdStatusToValue")
  CombinedLeoUnit      CombinedLeoUnit[] @relation("combinedUnitStatusToValue")
}

model OfficerLog {
  id        String    @id @default(uuid())
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  userId    String?
  officer   Officer   @relation(fields: [officerId], references: [id], onDelete: Cascade)
  officerId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model ImpoundedVehicle {
  id                  String            @id @default(uuid())
  vehicle             RegisteredVehicle @relation(fields: [registeredVehicleId], references: [id])
  registeredVehicleId String
  location            Value             @relation(fields: [valueId], references: [id])
  valueId             String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
}

model LeoIncident {
  id                   String    @id @default(uuid())
  caseNumber           Int       @default(autoincrement())
  description          String?   @db.Text
  descriptionData      Json?
  creator              Officer   @relation(fields: [creatorId], references: [id])
  creatorId            String
  officersInvolved     Officer[] @relation("involvedOfficers")
  firearmsInvolved     Boolean   @default(false)
  injuriesOrFatalities Boolean   @default(false)
  arrestsMade          Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now()) @updatedAt
  calls                Call911[]
}

model CombinedLeoUnit {
  id           String         @id @default(uuid())
  officers     Officer[]
  callsign     String
  status       StatusValue?   @relation("combinedUnitStatusToValue", fields: [statusId], references: [id])
  statusId     String?
  AssignedUnit AssignedUnit[]
}

enum StatusValueType {
  STATUS_CODE
  SITUATION_CODE
}

enum StatusEnum {
  ON_DUTY
  OFF_DUTY
}

enum WhatPages {
  DISPATCH
  EMS_FD
  LEO
}

enum ShouldDoType {
  SET_OFF_DUTY
  SET_ON_DUTY
  SET_ASSIGNED
  SET_STATUS
  PANIC_BUTTON
}

// dispatching
model ActiveDispatchers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// 911 calls & bolos
model Call911 {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  position        Position?         @relation(fields: [positionId], references: [id])
  positionId      String?
  userId          String?
  assignedUnits   AssignedUnit[]
  location        String            @db.Text
  postal          String?           @db.Text
  description     String?           @db.Text
  descriptionData Json?
  name            String            @db.VarChar(255)
  ended           Boolean?          @default(false)
  divisions       DivisionValue[]
  departments     DepartmentValue[]
  events          Call911Event[]
  incidents       LeoIncident[]
}

model Position {
  id      String    @id @default(uuid())
  lat     Float?
  lng     Float?
  Call911 Call911[]
}

model AssignedUnit {
  id            String           @id @default(uuid())
  officer       Officer?         @relation(fields: [officerId], references: [id])
  officerId     String?
  deputy        EmsFdDeputy?     @relation(fields: [emsFdDeputyId], references: [id])
  emsFdDeputyId String?
  combinedUnit  CombinedLeoUnit? @relation(fields: [combinedLeoId], references: [id])
  combinedLeoId String?
  call911       Call911?         @relation(fields: [call911Id], references: [id], onDelete: Cascade)
  call911Id     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
}

model Call911Event {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  call        Call911  @relation(fields: [call911Id], references: [id], onDelete: Cascade)
  call911Id   String
  description String   @db.Text
}

model Bolo {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  type        BoloType
  description String?  @db.Text
  plate       String?  @db.VarChar(255)
  model       String?  @db.VarChar(255)
  color       String?  @db.VarChar(255)
  name        String?  @db.VarChar(255)
  officer     Officer? @relation("bolosToOfficer", fields: [officerId], references: [id])
  officerId   String?
}

enum BoloType {
  VEHICLE
  PERSON
  OTHER
}

// tickets, arrest reports, warrants, written warnings
model Record {
  id                   String              @id @default(uuid())
  type                 RecordType
  citizen              Citizen             @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId            String
  officer              Officer             @relation(fields: [officerId], references: [id], onDelete: Cascade)
  officerId            String
  violations           Violation[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  postal               String              @db.VarChar(255)
  notes                String?             @db.Text
  release              RecordRelease?      @relation(fields: [releaseId], references: [id])
  releaseId            String?
  RecordLog            RecordLog[]
  ExpungementRequest   ExpungementRequest? @relation(fields: [expungementRequestId], references: [id])
  expungementRequestId String?
}

model RecordRelease {
  id         String      @id @default(uuid())
  type       ReleaseType
  releasedBy Citizen?    @relation(fields: [citizenId], references: [id], onDelete: SetNull)
  citizenId  String?
  Record     Record[]
}

enum ReleaseType {
  TIME_OUT
  BAIL_POSTED
}

enum RecordType {
  ARREST_REPORT
  TICKET
  WRITTEN_WARNING
}

model Warrant {
  id                   String              @id @default(uuid())
  citizen              Citizen             @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId            String
  officer              Officer             @relation(fields: [officerId], references: [id], onDelete: Cascade)
  officerId            String
  description          String              @db.Text
  status               WarrantStatus       @default(ACTIVE)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  RecordLog            RecordLog[]
  ExpungementRequest   ExpungementRequest? @relation(fields: [expungementRequestId], references: [id])
  expungementRequestId String?
}

model RecordLog {
  id        String   @id @default(uuid())
  citizen   Citizen  @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId String
  records   Record?  @relation(fields: [recordId], references: [id])
  recordId  String?
  warrant   Warrant? @relation(fields: [warrantId], references: [id])
  warrantId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum WarrantStatus {
  ACTIVE
  INACTIVE
}

// Expungement requests
model ExpungementRequest {
  id        String                   @id @default(uuid())
  citizen   Citizen                  @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId String
  user      User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  status    ExpungementRequestStatus @default(PENDING)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @default(now()) @updatedAt
  warrants  Warrant[]
  records   Record[]
}

enum ExpungementRequestStatus {
  ACCEPTED
  DENIED
  PENDING
}

// ems-fd
model EmsFdDeputy {
  id           String          @id @default(cuid())
  department   DepartmentValue @relation("emsFdDepartmentToDepartment", fields: [departmentId], references: [id])
  departmentId String
  callsign     String          @db.VarChar(255)
  callsign2    String          @db.VarChar(255)
  division     DivisionValue   @relation("emsFdDivisionToDivision", fields: [divisionId], references: [id])
  divisionId   String
  rank         Value?          @relation("emsFdRankToValue", fields: [rankId], references: [id])
  rankId       String?
  status       StatusValue?    @relation("emsFdStatusToValue", fields: [statusId], references: [id])
  statusId     String?
  suspended    Boolean         @default(false)
  badgeNumber  Int?
  imageId      String?         @db.VarChar(255)
  citizen      Citizen         @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId    String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt
  AssignedUnit AssignedUnit[]
}

// truck logs
model TruckLog {
  id        String             @id @default(uuid())
  citizen   Citizen?           @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId String?
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  vehicle   RegisteredVehicle? @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  vehicleId String?
  startedAt String             @db.VarChar(255)
  endedAt   String             @db.VarChar(255)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
}

// other
enum Feature {
  BLEETER
  TOW
  TAXI
  COURTHOUSE
  TRUCK_LOGS
  AOP
  BUSINESS
  ALLOW_DUPLICATE_CITIZEN_NAMES
  DISCORD_AUTH
  CALLS_911
  WEAPON_REGISTRATION
  SOCIAL_SECURITY_NUMBERS
  DISALLOW_TEXTFIELD_SELECTION
  ACTIVE_DISPATCHERS
}
