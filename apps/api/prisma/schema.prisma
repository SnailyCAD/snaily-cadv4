// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model cad {
  id                      String                 @id @default(cuid())
  name                    String                 @db.VarChar(255)
  owner                   User                   @relation(fields: [ownerId], references: [id])
  ownerId                 String
  areaOfPlay              String?                @db.VarChar(255)
  steamApiKey             String?                @db.VarChar(255)
  discordWebhookURL       String?                @db.VarChar(255)
  whitelisted             Boolean                @default(false)
  towWhitelisted          Boolean                @default(false)
  taxiWhitelisted         Boolean                @default(false)
  businessWhitelisted     Boolean                @default(false)
  maxPlateLength          Int                    @default(8)
  liveMapSocketURl        String?                @db.VarChar(255)
  logoId                  String?
  registrationCode        String?
  features                CadFeature[]
  disabledFeatures        Feature[]
  miscCadSettings         MiscCadSettings?       @relation(fields: [miscCadSettingsId], references: [id])
  miscCadSettingsId       String?
  apiToken                ApiToken?              @relation(fields: [apiTokenId], references: [id])
  apiTokenId              String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @default(now()) @updatedAt
  autoSetUserProperties   AutoSetUserProperties? @relation(fields: [autoSetUserPropertiesId], references: [id])
  autoSetUserPropertiesId String?
  discordRoles            DiscordRoles?          @relation(fields: [discordRolesId], references: [id])
  discordRolesId          String?
}

model CadFeature {
  id        String  @id @default(cuid())
  feature   Feature @unique
  isEnabled Boolean @default(false)
  cad       cad?    @relation(fields: [cadId], references: [id])
  cadId     String?
}

model MiscCadSettings {
  id String @id @default(cuid())

  /// OG = open graph.
  cadOGDescription          String?
  heightPrefix              String         @default("cm") @db.VarChar(255)
  weightPrefix              String         @default("kg") @db.VarChar(255)
  maxCitizensPerUser        Int?
  maxOfficersPerUser        Int?
  maxPlateLength            Int            @default(8)
  maxBusinessesPerCitizen   Int?
  maxDivisionsPerOfficer    Int?
  /// max units a user can create with a department
  maxDepartmentsEachPerUser Int?
  maxAssignmentsToIncidents Int?
  maxAssignmentsToCalls     Int?
  callsignTemplate          String         @default("{department}{callsign1} - {callsign2}{division}") @db.Text
  pairedUnitTemplate        String?        @default("1A-{callsign1}") @db.Text
  pairedUnitSymbol          String?        @default("A") @db.VarChar(255)
  signal100Enabled          Boolean        @default(false)
  liveMapURL                String?        @db.Text
  roleplayEnabled           Boolean?       @default(true)
  authScreenBgImageId       String?
  authScreenHeaderImageId   String?
  inactivityTimeout         Int?
  jailTimeScale             JailTimeScale?

  call911InactivityTimeout        Int?
  incidentInactivityTimeout       Int?
  unitInactivityTimeout           Int?
  boloInactivityTimeout           Int?
  activeWarrantsInactivityTimeout Int?

  /// deprecated, use `webhooks` instead
  call911WebhookId     String?
  statusesWebhookId    String?
  panicButtonWebhookId String?
  boloWebhookId        String?

  webhooks DiscordWebhook[]

  cad cad[]
}

model DiscordWebhook {
  id                String             @id @default(cuid())
  type              DiscordWebhookType @unique
  webhookId         String?
  channelId         String
  extraMessage      String?
  MiscCadSettings   MiscCadSettings?   @relation(fields: [miscCadSettingsId], references: [id], onDelete: Cascade)
  miscCadSettingsId String?
}

model AutoSetUserProperties {
  id String @id @default(cuid())

  leo      Boolean? @default(false)
  dispatch Boolean? @default(false)
  emsFd    Boolean? @default(false)

  cad cad[]

  @@map("AutoSetPropertiesUser")
}

model ApiToken {
  id      String   @id @default(cuid())
  enabled Boolean  @default(false)
  token   String?
  // empty = *
  routes  String[]

  uses      Int?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  logs      ApiTokenLog[]

  cad  cad[]
  User User[]
}

model ApiTokenLog {
  id         String   @id @default(uuid())
  apiToken   ApiToken @relation(fields: [apiTokenId], references: [id], onDelete: Cascade)
  apiTokenId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  statusCode String?
  route      String?
  method     String?
}

model DiscordRoles {
  id      String @id @default(cuid())
  guildId String

  leoRole             DiscordRole?  @relation("leoRole", fields: [leoRoleId], references: [id])
  leoRoleId           String?
  leoRoles            DiscordRole[] @relation("leoRoles")
  leoSupervisorRole   DiscordRole?  @relation("leoSupervisorRole", fields: [leoSupervisorRoleId], references: [id])
  leoSupervisorRoleId String?
  leoSupervisorRoles  DiscordRole[] @relation("leoSupervisorRoles")
  emsFdRole           DiscordRole?  @relation("emsFdRole", fields: [emsFdRoleId], references: [id])
  emsFdRoleId         String?
  emsFdRoles          DiscordRole[] @relation("emsFdRoles")
  dispatchRole        DiscordRole?  @relation("dispatchRole", fields: [dispatchRoleId], references: [id])
  dispatchRoleId      String?
  dispatchRoles       DiscordRole[] @relation("dispatchRoles")
  towRole             DiscordRole?  @relation("towRole", fields: [towRoleId], references: [id])
  towRoleId           String?
  towRoles            DiscordRole[] @relation("towRoles")
  taxiRole            DiscordRole?  @relation("taxiRole", fields: [taxiRoleId], references: [id])
  taxiRoleId          String?
  taxiRoles           DiscordRole[] @relation("taxiRoles")
  adminRole           DiscordRole?  @relation("adminRole", fields: [adminRoleId], references: [id])
  adminRoleId         String?
  whitelistedRoleId   String?
  whitelistedRole     DiscordRole?  @relation("whitelistedRole", fields: [whitelistedRoleId], references: [id])
  courthouseRoles     DiscordRole[] @relation("courthouseRoles")

  adminRolePermissions         String[]
  leoRolePermissions           String[]
  leoSupervisorRolePermissions String[]
  emsFdRolePermissions         String[]
  dispatchRolePermissions      String[]
  towRolePermissions           String[]
  taxiRolePermissions          String[]
  courthouseRolePermissions    String[]

  roles DiscordRole[]
  cad   cad[]
}

model DiscordRole {
  id                    String         @id @unique
  name                  String
  discordRoles          DiscordRoles   @relation(fields: [discordRolesId], references: [id])
  discordRolesId        String
  leoRoles              DiscordRoles[] @relation("leoRole")
  leoRolesArr           DiscordRoles[] @relation("leoRoles")
  emsFdRoles            DiscordRoles[] @relation("emsFdRole")
  emsFdRolesArr         DiscordRoles[] @relation("emsFdRoles")
  dispatchRoles         DiscordRoles[] @relation("dispatchRole")
  towRoles              DiscordRoles[] @relation("towRole")
  taxiRoles             DiscordRoles[] @relation("taxiRole")
  leoSupervisorRoles    DiscordRoles[] @relation("leoSupervisorRole")
  adminRoles            DiscordRoles[] @relation("adminRole")
  whitelistedRoles      DiscordRoles[] @relation("whitelistedRole")
  dispatchRolesArr      DiscordRoles[] @relation("dispatchRoles")
  leoSupervisorRolesArr DiscordRoles[] @relation("leoSupervisorRoles")
  taxiRolesArr          DiscordRoles[] @relation("taxiRoles")
  towRolesArr           DiscordRoles[] @relation("towRoles")
  courthouseRoles       DiscordRoles[] @relation("courthouseRoles")
  CustomRole            CustomRole[]
}

model User {
  id                       String                    @id @default(cuid())
  username                 String                    @unique @db.VarChar(255)
  password                 String                    @db.Text
  rank                     Rank                      @default(USER)
  isLeo                    Boolean                   @default(false)
  isSupervisor             Boolean                   @default(false)
  isEmsFd                  Boolean                   @default(false)
  isDispatch               Boolean                   @default(false)
  isTow                    Boolean                   @default(false)
  isTaxi                   Boolean                   @default(true)
  banned                   Boolean                   @default(false)
  banReason                String?
  avatarUrl                String?                   @db.Text
  steamId                  String?                   @db.VarChar(255)
  whitelistStatus          WhitelistStatus           @default(ACCEPTED)
  isDarkTheme              Boolean                   @default(true)
  tempPassword             String?
  statusViewMode           StatusViewMode            @default(DOT_COLOR)
  tableActionsAlignment    TableActionsAlignment     @default(RIGHT)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt
  discordId                String?
  lastDiscordSyncTimestamp DateTime?
  permissions              String[]
  soundSettings            UserSoundSettings?        @relation(fields: [soundSettingsId], references: [id])
  soundSettingsId          String?
  apiToken                 ApiToken?                 @relation(fields: [apiTokenId], references: [id])
  apiTokenId               String?
  roles                    CustomRole[]
  locale                   String?
  sessions                 UserSession[]
  toAddDefaultPermissions  ToAddDefaultPermissions[]

  // relational data
  citizens             Citizen[]
  cads                 cad[]
  vehicles             RegisteredVehicle[]
  weapons              Weapon[]
  notifications        Notification[]
  executedNotifictions Notification[]       @relation("executor")
  medicalRecords       MedicalRecord[]
  bleeterPosts         BleeterPost[]
  businesses           Business[]
  businessPosts        BusinessPost[]
  Employee             Employee[]
  officers             Officer[]
  emsFdDeputies        EmsFdDeputy[]
  TruckLog             TruckLog[]
  ExpungementRequest   ExpungementRequest[]
  ActiveDispatchers    ActiveDispatchers[]
  User2FA              User2FA[]
  NameChangeRequest    NameChangeRequest[]
  CourthousePost       CourthousePost[]
}

model UserSession {
  id           String   @id @default(cuid())
  refreshToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model ToAddDefaultPermissions {
  id          String                     @id @default(cuid())
  key         ToAddDefaultPermissionsKey
  user        User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  permissions String[]
  addedAt     DateTime                   @default(now())

  @@unique([key, userId])
}

model UserSoundSettings {
  id           String  @id @default(uuid())
  speech       Boolean @default(true)
  panicButton  Boolean @default(true)
  signal100    Boolean @default(true)
  addedToCall  Boolean @default(false)
  stopRoleplay Boolean @default(false)
  statusUpdate Boolean @default(false)
  incomingCall Boolean @default(false)
  User         User[]
}

model User2FA {
  id     String @id @default(uuid())
  secret String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Citizen {
  id                   String                        @id @default(cuid())
  socialSecurityNumber String?
  user                 User?                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String?
  name                 String                        @db.VarChar(255)
  surname              String                        @db.VarChar(255)
  dateOfBirth          DateTime
  gender               Value                         @relation("genderToValue", fields: [genderId], references: [id])
  genderId             String
  ethnicity            Value                         @relation("ethnicityToValue", fields: [ethnicityId], references: [id])
  ethnicityId          String
  hairColor            String                        @db.VarChar(255)
  eyeColor             String                        @db.VarChar(255)
  address              String                        @db.VarChar(255)
  postal               String?                       @db.VarChar(255)
  height               String                        @db.VarChar(255)
  weight               String                        @db.VarChar(255)
  driversLicense       Value?                        @relation("driversLicenseToValue", fields: [driversLicenseId], references: [id])
  driversLicenseId     String?
  dlCategory           DriversLicenseCategoryValue[] @relation("dlCategoryToDLCategory")
  weaponLicense        Value?                        @relation("weaponLicenseToValue", fields: [weaponLicenseId], references: [id])
  weaponLicenseId      String?
  pilotLicense         Value?                        @relation("pilotLicenseToValue", fields: [pilotLicenseId], references: [id])
  pilotLicenseId       String?
  waterLicense         Value?                        @relation("waterLicenseToValue", fields: [waterLicenseId], references: [id])
  waterLicenseId       String?
  ccw                  Value?                        @relation("ccwToValue", fields: [ccwId], references: [id])
  ccwId                String?
  imageId              String?                       @db.Text
  note                 String?                       @db.Text
  dead                 Boolean?                      @default(false)
  arrested             Boolean?                      @default(false)
  phoneNumber          String?
  dateOfDead           DateTime?
  occupation           String?                       @db.Text
  additionalInfo       String?                       @db.Text
  flags                Value[]                       @relation("citizenFlags")
  customFields         CustomFieldValue[]
  vehicles             RegisteredVehicle[]
  weapons              Weapon[]
  medicalRecords       MedicalRecord[]
  towCalls             TowCall[]
  createdTowCalls      TowCall[]                     @relation("towCallCreator")
  businesses           Business[]
  Employee             Employee[]
  officers             Officer[]
  warrants             Warrant[]
  Record               Record[]
  emsFdDeputies        EmsFdDeputy[]
  TaxiCall             TaxiCall[]
  createdTaxiCalls     TaxiCall[]                    @relation("taxiCallCreator")
  truckLogs            TruckLog[]
  createdAt            DateTime                      @default(now())
  updatedAt            DateTime                      @default(now()) @updatedAt
  appearance           String?
  RecordRelease        RecordRelease[]
  RecordLog            RecordLog[]
  ExpungementRequest   ExpungementRequest[]
  NameChangeRequest    NameChangeRequest[]
  DLExam               DLExam[]
  notes                Note[]
  WeaponExam           WeaponExam[]                  @relation("weaponExams")
  suspendedLicenses    SuspendedCitizenLicenses?     @relation(fields: [suspendedLicensesId], references: [id])
  suspendedLicensesId  String?
  LicenseExam          LicenseExam[]
}

model SuspendedCitizenLicenses {
  id              String    @id @default(uuid())
  driverLicense   Boolean   @default(false)
  pilotLicense    Boolean   @default(false)
  waterLicense    Boolean   @default(false)
  firearmsLicense Boolean   @default(false)
  citizens        Citizen[]
}

model Note {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  createdBy   Officer?           @relation(fields: [createdById], references: [id])
  createdById String?
  Citizen     Citizen?           @relation(fields: [citizenId], references: [id])
  citizenId   String?
  vehicle     RegisteredVehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId   String?
}

model RegisteredVehicle {
  id                   String                   @id @default(cuid())
  user                 User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String?
  citizen              Citizen                  @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId            String
  vinNumber            String                   @unique @db.VarChar(255)
  plate                String                   @unique @db.VarChar(255)
  model                VehicleValue             @relation(fields: [modelId], references: [id])
  modelId              String
  color                String                   @db.VarChar(255)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @default(now()) @updatedAt
  registrationStatus   Value                    @relation("registrationStatusToValue", fields: [registrationStatusId], references: [id])
  registrationStatusId String
  flags                Value[]                  @relation("vehicleFlags")
  insuranceStatus      Value?                   @relation("insuranceStatusToValue", fields: [insuranceStatusId], references: [id])
  insuranceStatusId    String?
  inspectionStatus     VehicleInspectionStatus?
  taxStatus            VehicleTaxStatus?
  reportedStolen       Boolean                  @default(false)
  impounded            Boolean                  @default(false)
  customFields         CustomFieldValue[]
  dmvStatus            WhitelistStatus?
  notes                Note[]
  appearance           String?

  TruckLog         TruckLog[]
  ImpoundedVehicle ImpoundedVehicle[]
  Business         Business[]         @relation("registeredBusinessVehicles")
}

model Weapon {
  id                   String             @id @default(cuid())
  user                 User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String?
  citizen              Citizen            @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId            String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
  serialNumber         String             @unique @db.VarChar(255)
  registrationStatus   Value              @relation("weaponRegistrationStatusToValue", fields: [registrationStatusId], references: [id])
  registrationStatusId String
  model                WeaponValue        @relation("weaponModelToValue", fields: [modelId], references: [id])
  modelId              String
  customFields         CustomFieldValue[]
}

model MedicalRecord {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  citizen   Citizen  @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // type = diseases
  type         String? @db.Text
  description  String? @db.Text
  bloodGroup   Value?  @relation(fields: [bloodGroupId], references: [id])
  bloodGroupId String?
}

// values
model Value {
  id         String    @id @default(cuid())
  type       ValueType
  value      String    @db.VarChar(255)
  isDefault  Boolean
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  position   Int?
  isDisabled Boolean   @default(false)

  // LICENSE type specific
  // this was added here since the migration of eg `LicenseValue` would be to large.
  licenseType ValueLicenseType?

  /// OFFICER_RANK only
  officerRankImageId     String?
  officerRankDepartments DepartmentValue[] @relation("officerRankDepartments")

  // how to clean this up?!
  ethnicityToValue                Citizen[]                     @relation("ethnicityToValue")
  genderToValue                   Citizen[]                     @relation("genderToValue")
  driversLicenseToValue           Citizen[]                     @relation("driversLicenseToValue")
  weaponLicenseToValue            Citizen[]                     @relation("weaponLicenseToValue")
  pilotLicenseToValue             Citizen[]                     @relation("pilotLicenseToValue")
  ccwToValue                      Citizen[]                     @relation("ccwToValue")
  registrationStatusToValue       RegisteredVehicle[]           @relation("registrationStatusToValue")
  weaponRegistrationStatusToValue Weapon[]                      @relation("weaponRegistrationStatusToValue")
  EmployeeValue                   EmployeeValue[]
  officerRankToValue              Officer[]                     @relation("officerRankToValue")
  StatusValueToValue              StatusValue[]                 @relation("StatusValueToValue")
  divisionToValue                 DivisionValue[]               @relation("divisionToValue")
  emsFdRankToValue                EmsFdDeputy[]                 @relation("emsFdRankToValue")
  departmentToValue               DepartmentValue[]             @relation("departmentToValue")
  driversLicenseCategoryToValue   DriversLicenseCategoryValue[] @relation("driversLicenseCategoryToValue")
  VehicleValue                    VehicleValue[]                @relation("vehicleValueToValue")
  WeaponValue                     WeaponValue[]                 @relation("weaponValueToValue")
  ImpoundedVehicle                ImpoundedVehicle[]
  TowCall                         TowCall[]
  MedicalRecord                   MedicalRecord[]
  vehicleFlags                    RegisteredVehicle[]           @relation("vehicleFlags")
  insuranceStatusToValue          RegisteredVehicle[]           @relation("insuranceStatusToValue")
  waterLicenseToValue             Citizen[]                     @relation("waterLicenseToValue")
  citizenFlags                    Citizen[]                     @relation("citizenFlags")
  DLExam                          DLExam[]                      @relation("dlExamToLicense")
  DepartmentValue                 DepartmentValue[]             @relation("departmentValueToOfficerRank")
  QualificationValue              QualificationValue[]
  CallTypeValue                   CallTypeValue[]               @relation("callTypeValueToValue")
  WeaponExam                      WeaponExam[]                  @relation("weaponExamToLicense")
  LicenseExam                     LicenseExam[]                 @relation("examToLicense")
}

model PenalCode {
  id                     String                @id @default(cuid())
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @default(now()) @updatedAt
  title                  String                @db.VarChar(255)
  description            String?               @db.Text
  descriptionData        Json?
  type                   PenalCodeType?
  warningApplicable      WarningApplicable?    @relation(fields: [warningApplicableId], references: [id])
  warningApplicableId    String?
  warningNotApplicable   WarningNotApplicable? @relation(fields: [warningNotApplicableId], references: [id])
  warningNotApplicableId String?
  violations             Violation[]
  position               Int?
  group                  PenalCodeGroup?       @relation(fields: [groupId], references: [id])
  groupId                String?
}

model PenalCodeGroup {
  id        String      @id @default(cuid())
  position  Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  name      String
  PenalCode PenalCode[]
}

// Int[] = [field1, field2]. Items in this array where idx > 1 will be ignored
model WarningApplicable {
  id        String      @id @default(uuid())
  fines     Int[]
  PenalCode PenalCode[]
}

model WarningNotApplicable {
  id         String      @id @default(uuid())
  fines      Int[]
  prisonTerm Int[]
  bail       Int[]
  PenalCode  PenalCode[]
}

model Violation {
  id          String    @id @default(uuid())
  fine        Int?
  jailTime    Int?
  bail        Int?
  penalCode   PenalCode @relation(fields: [penalCodeId], references: [id])
  penalCodeId String
  records     Record[]
}

model SeizedItem {
  id       String  @id @default(uuid())
  record   Record  @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId String
  item     String
  quantity Int     @default(1)
  illegal  Boolean @default(false)
}

model DivisionValue {
  id                         String                       @id @default(cuid())
  value                      Value                        @relation("divisionToValue", fields: [valueId], references: [id], onDelete: Cascade)
  valueId                    String
  department                 DepartmentValue?             @relation("divisionDepartmentToValue", fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId               String?
  callsign                   String?
  officers                   Officer[]                    @relation("officerDivisionToDivision")
  officerDivisionsToDivision Officer[]                    @relation("officerDivisionsToDivision")
  deputies                   EmsFdDeputy[]                @relation("emsFdDivisionToDivision")
  pairedUnitTemplate         String?
  Call911                    Call911[]
  IndividualDivisionCallsign IndividualDivisionCallsign[]
}

model DepartmentValue {
  id                   String               @id @default(cuid())
  value                Value                @relation("departmentToValue", fields: [valueId], references: [id], onDelete: Cascade)
  valueId              String
  callsign             String?
  whitelisted          Boolean              @default(false)
  isDefaultDepartment  Boolean              @default(false)
  type                 DepartmentType       @default(LEO)
  EmsFdDeputy          EmsFdDeputy[]        @relation("emsFdDepartmentToDepartment")
  Officer              Officer[]            @relation("officerDepartmentToDepartment")
  division             DivisionValue[]      @relation("divisionDepartmentToValue")
  LeoWhitelistStatus   LeoWhitelistStatus[]
  Call911              Call911[]
  StatusValue          StatusValue?         @relation(fields: [statusValueId], references: [id])
  statusValueId        String?
  defaultOfficerRank   Value?               @relation("departmentValueToOfficerRank", fields: [defaultOfficerRankId], references: [id])
  defaultOfficerRankId String?
  isConfidential       Boolean              @default(false)
  Qualification        QualificationValue[]
  CombinedLeoUnit      CombinedLeoUnit[]
  Value                Value[]              @relation("officerRankDepartments")
}

model DriversLicenseCategoryValue {
  id            String                     @id @default(cuid())
  valueId       String
  value         Value                      @relation("driversLicenseCategoryToValue", fields: [valueId], references: [id], onDelete: Cascade)
  type          DriversLicenseCategoryType
  description   String?
  citizens      Citizen[]                  @relation("dlCategoryToDLCategory")
  DLExam        DLExam[]
  WeaponExam    WeaponExam[]
  LicenseExam   LicenseExam?               @relation(fields: [licenseExamId], references: [id])
  licenseExamId String?
}

model VehicleValue {
  id                String              @id @default(cuid())
  valueId           String
  value             Value               @relation("vehicleValueToValue", fields: [valueId], references: [id], onDelete: Cascade)
  hash              String?
  RegisteredVehicle RegisteredVehicle[]
}

model WeaponValue {
  id      String   @id @default(cuid())
  valueId String
  value   Value    @relation("weaponValueToValue", fields: [valueId], references: [id], onDelete: Cascade)
  hash    String?
  weapon  Weapon[] @relation("weaponModelToValue")
}

model CallTypeValue {
  id       String    @id @default(cuid())
  priority String?
  valueId  String
  value    Value     @relation("callTypeValueToValue", fields: [valueId], references: [id], onDelete: Cascade)
  Call911  Call911[]
}

// notifications
model Notification {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  executor    User     @relation("executor", fields: [executorId], references: [id], onDelete: Cascade)
  executorId  String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

// bleeter
model BleeterPost {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  title     String   @db.VarChar(255)
  body      String?  @db.Text
  bodyData  Json?
  imageId   String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// tow
model TowCall {
  id                String   @id @default(uuid())
  userId            String?
  assignedUnit      Citizen? @relation(fields: [assignedUnitId], references: [id], onDelete: SetNull)
  assignedUnitId    String?
  location          String   @db.VarChar(255)
  postal            String?  @db.Text
  deliveryAddress   Value?   @relation(fields: [deliveryAddressId], references: [id])
  deliveryAddressId String?
  plate             String?  @db.VarChar(255)
  model             String?  @db.VarChar(255)
  name              String?
  description       String?  @db.Text
  descriptionData   Json?
  creator           Citizen? @relation("towCallCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId         String?
  ended             Boolean  @default(false)
  callCountyService Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

// taxi
model TaxiCall {
  id              String   @id @default(uuid())
  userId          String?
  assignedUnit    Citizen? @relation(fields: [assignedUnitId], references: [id], onDelete: SetNull)
  assignedUnitId  String?
  location        String   @db.VarChar(255)
  postal          String?  @db.Text
  name            String?
  description     String?  @db.Text
  descriptionData Json?
  creator         Citizen? @relation("taxiCallCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

// businesses
model Business {
  id            String              @id @default(cuid())
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  citizen       Citizen             @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId     String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  name          String              @db.VarChar(255)
  whitelisted   Boolean             @default(false)
  address       String              @db.Text
  postal        String?             @db.VarChar(255)
  status        WhitelistStatus?
  businessPosts BusinessPost[]
  employees     Employee[]
  vehicles      RegisteredVehicle[] @relation("registeredBusinessVehicles")
}

model Employee {
  id                 String          @id @default(cuid())
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  citizen            Citizen         @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId          String
  business           Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId         String
  role               EmployeeValue?  @relation("employeeToValue", fields: [roleId], references: [id], onDelete: Restrict)
  roleId             String?
  employeeOfTheMonth Boolean         @default(false)
  canCreatePosts     Boolean         @default(true)
  whitelistStatus    WhitelistStatus @default(ACCEPTED)
  businessPosts      BusinessPost[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @default(now()) @updatedAt
}

model BusinessPost {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String

  title     String   @db.VarChar(255)
  body      String?  @db.Text
  bodyData  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model EmployeeValue {
  id        String         @id @default(cuid())
  value     Value          @relation(fields: [valueId], references: [id], onDelete: Cascade)
  valueId   String
  as        EmployeeAsEnum @default(EMPLOYEE)
  employees Employee[]     @relation("employeeToValue")
}

// leo
model Officer {
  id                          String                       @id @default(cuid())
  department                  DepartmentValue?             @relation("officerDepartmentToDepartment", fields: [departmentId], references: [id])
  departmentId                String?
  callsign                    String                       @db.VarChar(255)
  callsign2                   String                       @db.VarChar(255)
  activeDivisionCallsign      IndividualDivisionCallsign?  @relation("divisionCallsign", fields: [activeDivisionCallsignId], references: [id])
  activeDivisionCallsignId    String?
  incremental                 Int?
  // `division` is deprecated. Use `divisions` instead.
  division                    DivisionValue?               @relation("officerDivisionToDivision", fields: [divisionId], references: [id])
  divisionId                  String?
  divisions                   DivisionValue[]              @relation("officerDivisionsToDivision")
  rank                        Value?                       @relation("officerRankToValue", fields: [rankId], references: [id])
  rankId                      String?
  position                    String?                      @db.Text
  status                      StatusValue?                 @relation("officerStatusToValue", fields: [statusId], references: [id])
  statusId                    String?
  suspended                   Boolean                      @default(false)
  badgeNumber                 Int?
  imageId                     String?                      @db.VarChar(255)
  citizen                     Citizen                      @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId                   String
  user                        User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @default(now()) @updatedAt
  whitelistStatus             LeoWhitelistStatus?          @relation(fields: [whitelistStatusId], references: [id])
  whitelistStatusId           String?
  radioChannelId              String?
  bolos                       Bolo[]                       @relation("bolosToOfficer")
  warrants                    Warrant[]
  logs                        OfficerLog[]
  Record                      Record[]
  assignedUnit                AssignedUnit[]
  activeIncident              LeoIncident?                 @relation("activeIncident", fields: [activeIncidentId], references: [id])
  activeIncidentId            String?
  activeCall                  Call911?                     @relation("activeCall", fields: [activeCallId], references: [id])
  activeCallId                String?
  LeoIncident                 LeoIncident[]
  LeoIncidentInvolvedOfficers LeoIncident[]                @relation("involvedOfficers")
  combinedLeoUnit             CombinedLeoUnit?             @relation(fields: [combinedLeoUnitId], references: [id])
  combinedLeoUnitId           String?
  lastStatusChangeTimestamp   DateTime?
  qualifications              UnitQualification[]
  IncidentInvolvedUnit        IncidentInvolvedUnit[]
  Note                        Note[]
  callsigns                   IndividualDivisionCallsign[]
  AssignedWarrantOfficer      AssignedWarrantOfficer[]
}

model IndividualDivisionCallsign {
  id         String         @id @default(uuid())
  divisionId String?
  division   DivisionValue? @relation(fields: [divisionId], references: [id])
  callsign   String
  callsign2  String
  officerId  String
  officer    Officer        @relation(fields: [officerId], references: [id], onDelete: Cascade)
  Officer    Officer[]      @relation("divisionCallsign")
}

model UnitQualification {
  id              String             @id @default(uuid())
  qualification   QualificationValue @relation(fields: [qualificationId], references: [id])
  qualificationId String

  suspendedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  officerId     String?
  Officer       Officer?     @relation(fields: [officerId], references: [id], onDelete: Cascade)
  emsFdDeputyId String?
  emsFdDeputy   EmsFdDeputy? @relation(fields: [emsFdDeputyId], references: [id], onDelete: Cascade)
}

model QualificationValue {
  id                String                 @id @default(uuid())
  imageId           String?
  /// name of the qualification
  valueId           String
  value             Value                  @relation(fields: [valueId], references: [id], onDelete: Cascade)
  departments       DepartmentValue[]
  departmentId      String?
  description       String?                @db.Text
  qualificationType QualificationValueType @default(QUALIFICATION)
  UnitQualification UnitQualification[]
}

model LeoWhitelistStatus {
  id           String          @id @default(uuid())
  status       WhitelistStatus
  // the department they're awaiting access for.
  department   DepartmentValue @relation(fields: [departmentId], references: [id])
  departmentId String
  Officers     Officer[]
  EmsFdDeputy  EmsFdDeputy[]
}

model StatusValue {
  id          String            @id @default(uuid())
  value       Value             @relation("StatusValueToValue", fields: [valueId], references: [id], onDelete: Cascade)
  valueId     String
  shouldDo    ShouldDoType      @default(SET_STATUS)
  whatPages   WhatPages[]
  color       String?
  type        StatusValueType   @default(STATUS_CODE)
  departments DepartmentValue[]

  officerStatusToValue Officer[]         @relation("officerStatusToValue")
  emsFdStatusToValue   EmsFdDeputy[]     @relation("emsFdStatusToValue")
  CombinedLeoUnit      CombinedLeoUnit[] @relation("combinedUnitStatusToValue")
  Call911              Call911[]
  LeoIncident          LeoIncident[]
}

model OfficerLog {
  id            String       @id @default(uuid())
  startedAt     DateTime     @default(now())
  endedAt       DateTime?
  userId        String?
  officer       Officer?     @relation(fields: [officerId], references: [id], onDelete: Cascade)
  officerId     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  emsFdDeputy   EmsFdDeputy? @relation(fields: [emsFdDeputyId], references: [id], onDelete: Cascade)
  emsFdDeputyId String?
}

model ImpoundedVehicle {
  id                  String            @id @default(uuid())
  vehicle             RegisteredVehicle @relation(fields: [registeredVehicleId], references: [id])
  registeredVehicleId String
  location            Value             @relation(fields: [valueId], references: [id])
  valueId             String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
}

model LeoIncident {
  id                   String                 @id @default(uuid())
  caseNumber           Int                    @default(autoincrement())
  description          String?                @db.Text
  descriptionData      Json?
  postal               String?
  // when null, it is the dispatcher
  creator              Officer?               @relation(fields: [creatorId], references: [id])
  creatorId            String?
  officersInvolved     Officer[]              @relation("involvedOfficers")
  unitsInvolved        IncidentInvolvedUnit[] @relation("unitsInvolved")
  firearmsInvolved     Boolean                @default(false)
  injuriesOrFatalities Boolean                @default(false)
  arrestsMade          Boolean                @default(false)
  isActive             Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  situationCode        StatusValue?           @relation(fields: [situationCodeId], references: [id])
  situationCodeId      String?
  events               IncidentEvent[]
  calls                Call911[]
  Officer              Officer[]              @relation("activeIncident")
  CombinedLeoUnit      CombinedLeoUnit[]      @relation("combinedActiveIncident")
  EmsFdDeputy          EmsFdDeputy[]          @relation("emsfdActiveIncident")
}

model IncidentEvent {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  incident    LeoIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  incidentId  String
  description String      @db.Text
}

model CombinedLeoUnit {
  id                        String                   @id @default(uuid())
  officers                  Officer[]
  callsign                  String
  callsign2                 String?
  department                DepartmentValue?         @relation(fields: [departmentId], references: [id])
  departmentId              String?
  incremental               Int?
  radioChannelId            String?
  status                    StatusValue?             @relation("combinedUnitStatusToValue", fields: [statusId], references: [id])
  statusId                  String?
  pairedUnitTemplate        String?
  activeCall                Call911?                 @relation("CombinedLeoUnitActiveCall", fields: [activeCallId], references: [id])
  activeCallId              String?
  activeIncident            LeoIncident?             @relation("combinedActiveIncident", fields: [activeIncidentId], references: [id])
  activeIncidentId          String?
  lastStatusChangeTimestamp DateTime?
  AssignedUnit              AssignedUnit[]
  IncidentInvolvedUnit      IncidentInvolvedUnit[]
  AssignedWarrantOfficer    AssignedWarrantOfficer[]
}

// dispatching
model ActiveDispatchers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

// 911 calls & bolos
model Call911 {
  id               String            @id @default(cuid())
  caseNumber       Int               @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  position         Position?         @relation(fields: [positionId], references: [id])
  positionId       String?
  userId           String?
  assignedUnits    AssignedUnit[]
  location         String            @db.Text
  postal           String?           @db.Text
  description      String?           @db.Text
  descriptionData  Json?
  name             String            @db.VarChar(255)
  ended            Boolean?          @default(false)
  situationCode    StatusValue?      @relation(fields: [situationCodeId], references: [id])
  situationCodeId  String?
  viaDispatch      Boolean?          @default(false)
  divisions        DivisionValue[]
  departments      DepartmentValue[]
  events           Call911Event[]
  incidents        LeoIncident[]
  type             CallTypeValue?    @relation(fields: [typeId], references: [id])
  typeId           String?
  Officer          Officer[]         @relation("activeCall")
  EmsFdDeputy      EmsFdDeputy[]     @relation("emsFdActiveCall")
  CombinedLeoUnit  CombinedLeoUnit[] @relation("CombinedLeoUnitActiveCall")
  gtaMapPosition   GTAMapPosition?   @relation(fields: [gtaMapPositionId], references: [id])
  gtaMapPositionId String?
}

model GTAMapPosition {
  id      String @id @default(uuid())
  x       Float
  y       Float
  z       Float
  heading Float

  Call911 Call911[]
}

model Position {
  id      String    @id @default(uuid())
  lat     Float?
  lng     Float?
  Call911 Call911[]
}

model AssignedUnit {
  id            String           @id @default(uuid())
  isPrimary     Boolean?         @default(false)
  officer       Officer?         @relation(fields: [officerId], references: [id])
  officerId     String?
  deputy        EmsFdDeputy?     @relation(fields: [emsFdDeputyId], references: [id])
  emsFdDeputyId String?
  combinedUnit  CombinedLeoUnit? @relation(fields: [combinedLeoId], references: [id])
  combinedLeoId String?
  call911       Call911?         @relation(fields: [call911Id], references: [id], onDelete: Cascade)
  call911Id     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
}

model AssignedWarrantOfficer {
  id            String           @id @default(uuid())
  officer       Officer?         @relation(fields: [officerId], references: [id])
  officerId     String?
  combinedUnit  CombinedLeoUnit? @relation(fields: [combinedLeoId], references: [id])
  combinedLeoId String?
  warrant       Warrant?         @relation(fields: [warrantId], references: [id], onDelete: Cascade)
  warrantId     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
}

model IncidentInvolvedUnit {
  id            String           @id @default(uuid())
  officer       Officer?         @relation(fields: [officerId], references: [id])
  officerId     String?
  deputy        EmsFdDeputy?     @relation(fields: [emsFdDeputyId], references: [id])
  emsFdDeputyId String?
  combinedUnit  CombinedLeoUnit? @relation(fields: [combinedLeoId], references: [id])
  combinedLeoId String?
  incident      LeoIncident?     @relation("unitsInvolved", fields: [incidentId], references: [id], onDelete: Cascade)
  incidentId    String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
}

model Call911Event {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  call        Call911  @relation(fields: [call911Id], references: [id], onDelete: Cascade)
  call911Id   String
  description String   @db.Text
}

model Bolo {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  type        BoloType
  description String?  @db.Text
  plate       String?  @db.VarChar(255)
  model       String?  @db.VarChar(255)
  color       String?  @db.VarChar(255)
  name        String?  @db.VarChar(255)
  officer     Officer? @relation("bolosToOfficer", fields: [officerId], references: [id])
  officerId   String?
}

// tickets, arrest reports, warrants, written warnings
model Record {
  id                   String              @id @default(uuid())
  caseNumber           Int                 @default(autoincrement())
  type                 RecordType
  citizen              Citizen             @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId            String
  officer              Officer?            @relation(fields: [officerId], references: [id], onDelete: Cascade)
  officerId            String?
  violations           Violation[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  postal               String              @db.VarChar(255)
  notes                String?             @db.Text
  release              RecordRelease?      @relation(fields: [releaseId], references: [id])
  releaseId            String?
  RecordLog            RecordLog[]
  ExpungementRequest   ExpungementRequest? @relation(fields: [expungementRequestId], references: [id])
  expungementRequestId String?
  seizedItems          SeizedItem[]
  status               WhitelistStatus?    @default(ACCEPTED)
  paymentStatus        PaymentStatus?
}

model RecordRelease {
  id         String      @id @default(uuid())
  type       ReleaseType
  releasedBy Citizen?    @relation(fields: [citizenId], references: [id], onDelete: SetNull)
  citizenId  String?
  Record     Record[]
}

model Warrant {
  id                   String                   @id @default(uuid())
  citizen              Citizen                  @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId            String
  officer              Officer?                 @relation(fields: [officerId], references: [id], onDelete: Cascade)
  officerId            String?
  assignedOfficers     AssignedWarrantOfficer[]
  description          String                   @db.Text
  status               WarrantStatus            @default(ACTIVE)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @default(now()) @updatedAt
  RecordLog            RecordLog[]
  ExpungementRequest   ExpungementRequest?      @relation(fields: [expungementRequestId], references: [id])
  expungementRequestId String?
  approvalStatus       WhitelistStatus?         @default(ACCEPTED)
}

model RecordLog {
  id        String   @id @default(uuid())
  citizen   Citizen  @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId String
  records   Record?  @relation(fields: [recordId], references: [id])
  recordId  String?
  warrant   Warrant? @relation(fields: [warrantId], references: [id])
  warrantId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Expungement requests
model ExpungementRequest {
  id        String                   @id @default(uuid())
  citizen   Citizen                  @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId String
  user      User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  status    ExpungementRequestStatus @default(PENDING)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @default(now()) @updatedAt
  warrants  Warrant[]
  records   Record[]
}

model NameChangeRequest {
  id         String          @id @default(uuid())
  citizen    Citizen         @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId  String
  user       User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  newName    String
  newSurname String
  status     WhitelistStatus @default(PENDING)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt
}

model CourtEntry {
  id              String      @id @default(uuid())
  title           String
  caseNumber      String
  descriptionData Json?
  dates           CourtDate[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
}

model CourtDate {
  id           String     @id @default(uuid())
  note         String?
  date         DateTime
  courtEntry   CourtEntry @relation(fields: [courtEntryId], references: [id], onDelete: Cascade)
  courtEntryId String
}

// ems-fd
model EmsFdDeputy {
  id                        String                 @id @default(cuid())
  department                DepartmentValue?       @relation("emsFdDepartmentToDepartment", fields: [departmentId], references: [id])
  departmentId              String?
  callsign                  String                 @db.VarChar(255)
  callsign2                 String                 @db.VarChar(255)
  incremental               Int?
  division                  DivisionValue?         @relation("emsFdDivisionToDivision", fields: [divisionId], references: [id])
  divisionId                String?
  position                  String?                @db.Text
  rank                      Value?                 @relation("emsFdRankToValue", fields: [rankId], references: [id])
  rankId                    String?
  status                    StatusValue?           @relation("emsFdStatusToValue", fields: [statusId], references: [id])
  statusId                  String?
  suspended                 Boolean                @default(false)
  badgeNumber               Int?
  imageId                   String?                @db.VarChar(255)
  citizen                   Citizen                @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId                 String
  user                      User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @default(now()) @updatedAt
  radioChannelId            String?
  activeCall                Call911?               @relation("emsFdActiveCall", fields: [activeCallId], references: [id])
  activeCallId              String?
  activeIncident            LeoIncident?           @relation("emsfdActiveIncident", fields: [activeIncidentId], references: [id])
  activeIncidentId          String?
  whitelistStatus           LeoWhitelistStatus?    @relation(fields: [whitelistStatusId], references: [id])
  whitelistStatusId         String?
  logs                      OfficerLog[]
  AssignedUnit              AssignedUnit[]
  lastStatusChangeTimestamp DateTime?
  qualifications            UnitQualification[]
  IncidentInvolvedUnit      IncidentInvolvedUnit[]
}

// truck logs
model TruckLog {
  id        String             @id @default(uuid())
  citizen   Citizen?           @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId String?
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  vehicle   RegisteredVehicle? @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  vehicleId String?
  startedAt String             @db.VarChar(255)
  endedAt   String             @db.VarChar(255)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
  notes     String?
}

// Exams
model LicenseExam {
  id           String                        @id @default(uuid())
  theoryExam   DLExamPassType?
  practiceExam DLExamPassType?
  status       DLExamStatus                  @default(IN_PROGRESS)
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @default(now()) @updatedAt
  type         LicenseExamType
  citizen      Citizen                       @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId    String
  license      Value                         @relation("examToLicense", fields: [licenseId], references: [id])
  licenseId    String
  categories   DriversLicenseCategoryValue[]
}

model DLExam {
  id           String                        @id @default(uuid())
  citizen      Citizen                       @relation(fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId    String
  theoryExam   DLExamPassType?
  practiceExam DLExamPassType?
  license      Value                         @relation("dlExamToLicense", fields: [licenseId], references: [id])
  licenseId    String
  categories   DriversLicenseCategoryValue[]
  status       DLExamStatus                  @default(IN_PROGRESS)
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @default(now()) @updatedAt
}

model WeaponExam {
  id           String                        @id @default(uuid())
  citizen      Citizen                       @relation("weaponExams", fields: [citizenId], references: [id], onDelete: Cascade)
  citizenId    String
  theoryExam   DLExamPassType?
  practiceExam DLExamPassType?
  license      Value                         @relation("weaponExamToLicense", fields: [licenseId], references: [id])
  licenseId    String
  categories   DriversLicenseCategoryValue[]
  status       DLExamStatus                  @default(IN_PROGRESS)
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @default(now()) @updatedAt
}

/// custom fields
model CustomField {
  id              String              @id @default(uuid())
  name            String
  citizenEditable Boolean             @default(false)
  category        CustomFieldCategory
  values          CustomFieldValue[]
}

model CustomFieldValue {
  id                 String              @id @default(uuid())
  value              String?
  field              CustomField         @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId            String
  Citizens           Citizen[]
  RegisteredVehicles RegisteredVehicle[]
  Weapons            Weapon[]
}

/// custom roles
model CustomRole {
  id            String       @id @default(uuid())
  name          String       @unique
  iconId        String?
  permissions   String[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  discordRole   DiscordRole? @relation(fields: [discordRoleId], references: [id])
  discordRoleId String?
  User          User[]
}

// courthouse posts
model CourthousePost {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  title           String   @db.VarChar(255)
  descriptionData Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

enum LicenseExamType {
  DRIVER
  FIREARM
  WATER
  PILOT
}

enum QualificationValueType {
  QUALIFICATION
  AWARD
}

enum CustomFieldCategory {
  CITIZEN
  WEAPON
  VEHICLE
}

enum DLExamPassType {
  PASSED
  FAILED
}

enum DLExamStatus {
  IN_PROGRESS
  PASSED
  FAILED
}

enum StatusViewMode {
  FULL_ROW_COLOR
  DOT_COLOR
}

enum TableActionsAlignment {
  NONE
  LEFT
  RIGHT
}

enum Rank {
  OWNER
  ADMIN
  USER
}

enum WhitelistStatus {
  ACCEPTED
  PENDING
  DECLINED
}

enum ValueLicenseType {
  LICENSE
  REGISTRATION_STATUS
  INSURANCE_STATUS
}

enum DepartmentType {
  LEO
  EMS_FD
}

enum ValueType {
  LICENSE
  GENDER
  ETHNICITY
  VEHICLE
  WEAPON
  BLOOD_GROUP
  BUSINESS_ROLE
  CODES_10
  PENAL_CODE
  DEPARTMENT
  OFFICER_RANK
  DIVISION
  DRIVERSLICENSE_CATEGORY
  IMPOUND_LOT
  VEHICLE_FLAG
  CITIZEN_FLAG
  QUALIFICATION
  CALL_TYPE
}

enum DriversLicenseCategoryType {
  AUTOMOTIVE
  AVIATION
  WATER
  FIREARM
}

enum EmployeeAsEnum {
  OWNER
  MANAGER
  EMPLOYEE
}

enum StatusValueType {
  STATUS_CODE
  SITUATION_CODE
}

enum StatusEnum {
  ON_DUTY
  OFF_DUTY
}

enum WhatPages {
  DISPATCH
  EMS_FD
  LEO
}

enum ShouldDoType {
  SET_OFF_DUTY
  SET_ON_DUTY
  SET_ASSIGNED
  SET_STATUS
  PANIC_BUTTON
}

enum BoloType {
  VEHICLE
  PERSON
  OTHER
}

enum ReleaseType {
  TIME_OUT
  BAIL_POSTED
}

enum RecordType {
  ARREST_REPORT
  TICKET
  WRITTEN_WARNING
}

enum WarrantStatus {
  ACTIVE
  INACTIVE
}

enum ExpungementRequestStatus {
  ACCEPTED
  DENIED
  PENDING
}

enum VehicleInspectionStatus {
  PASSED
  FAILED
}

enum VehicleTaxStatus {
  TAXED
  UNTAXED
}

enum DiscordWebhookType {
  CALL_911
  PANIC_BUTTON
  UNIT_STATUS
  BOLO
  CITIZEN_RECORD
  VEHICLE_IMPOUNDED
  WARRANTS
}

enum JailTimeScale {
  HOURS
  MINUTES
  SECONDS
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum ToAddDefaultPermissionsKey {
  MANAGE_WARRANTS_PERMISSIONS
}

enum PenalCodeType {
  INFRACTION
  MISDEMEANOR
  FELONY
}

// other
enum Feature {
  BLEETER
  TOW
  TAXI
  COURTHOUSE
  TRUCK_LOGS
  AOP
  BUSINESS
  ALLOW_DUPLICATE_CITIZEN_NAMES
  DISCORD_AUTH
  CALLS_911
  WEAPON_REGISTRATION
  SOCIAL_SECURITY_NUMBERS
  CUSTOM_TEXTFIELD_VALUES
  /// @deprecated, use `CUSTOM_TEXTFIELD_VALUES` instead
  DISALLOW_TEXTFIELD_SELECTION
  ACTIVE_DISPATCHERS
  ACTIVE_INCIDENTS
  ALLOW_CITIZEN_UPDATE_LICENSE
  ALLOW_REGULAR_LOGIN
  RADIO_CHANNEL_MANAGEMENT
  ALLOW_CITIZEN_DELETION_BY_NON_ADMIN
  /// @deprecated, use `LICENSE_EXAMS` instead
  DL_EXAMS
  DMV
  BADGE_NUMBERS
  USER_API_TOKENS
  CITIZEN_RECORD_APPROVAL
  COMMON_CITIZEN_CARDS
  STEAM_OAUTH
  CREATE_USER_CITIZEN_LEO
  LEO_TICKETS
  LEO_BAIL
  COURTHOUSE_POSTS
  /// @deprecated, use `LICENSE_EXAMS` instead
  WEAPON_EXAMS
  ACTIVE_WARRANTS
  CITIZEN_DELETE_ON_DEAD
  PANIC_BUTTON
  WARRANT_STATUS_APPROVAL
  DIVISIONS
  TONES
  LICENSE_EXAMS
}
